# General GQL Types
type Query {
  sphere(id: ID!): Sphere!
  spheres: SphereConnection!
  orbit(id: ID!): Orbit!
  orbits(sphereEntryHashB64: String): OrbitConnection!
  getOrbitHierarchy(orbitEntryHashB64: String) : String! 
  me: AgentProfile!
}

type Mutation {
  createSphere(sphere: SphereCreateUpdateParams): CreateResponsePayload!
  updateSphere(sphere: SphereCreateUpdateParams): Sphere!
  createOrbit(orbit: OrbitCreateUpdateParams): CreateResponsePayload!
  updateOrbit(orbit: OrbitCreateUpdateParams): Orbit!
  createProfile(profile: UserProfileCreateUpdateParams): AgentProfile!
  updateProfile(profile: UserProfileCreateUpdateParams): AgentProfile!
}

scalar DateTime

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
  endCursor: String!
}

interface Node {
  id: ID!
  eH: String!
}

# Holochain Specific Types
type CreateResponsePayload {
  actionHash: String!
  entryHash: String!
}

# ---- Profiles ----- #
# Profiles GQL Types

# Profiles Types
type AgentProfile {
  agentPubKey: String!
  profile: Profile!
}

type Profile {
  nickname: String!
  fields: ProfileFields
}

type ProfileFields {
  location: String
  isPublic: String
  avatar: String
}

# Profile Input/Output
input UserProfileCreateUpdateParams {
  nickname: String!
  location: String
  isPublic: String
  avatar: String
}

# ---- Sphere ----- #
# Sphere GQL Types
type SphereConnection {
  edges: [SphereEdge!]!
  pageInfo: PageInfo!
}

type SphereEdge {
  cursor: String!
  node: Sphere!
}

# Sphere Types
type Sphere implements Node {
  id: ID!
  eH: String!
  name: String!
  metadata: SphereMetaData
}

type SphereMetaData {
  description: String!
  hashtag: String
}

# Sphere Input/Outputs
input SphereCreateUpdateParams {
  name: String!
  description: String
  hashtag: String
}

# ---- Orbit ----- #
# Orbit GQL Types
type OrbitConnection {
  edges: [OrbitEdge!]!
  pageInfo: PageInfo!
}

type OrbitEdge {
  cursor: String!
  node: Orbit!
}

# Orbit Types
type Orbit implements Node {
  id: ID!
  eH: String!
  name: String!
  sphereHash: String!
  parentHash: String
  frequency: Frequency!
  scale: Scale!
  metadata: OrbitMetaData
}

type TimeFrame {
  startTime: Float!
  endTime: Float
}

# Frequency Enum
enum Frequency {
  Day
  Week
  Month
  Quarter
}

# Scale Enum
enum Scale {
  Sub
  Atom
  Astro
}

type OrbitMetaData {
  description: String
  timeframe: TimeFrame!
}

# Orbit Input/Outputs
input OrbitCreateUpdateParams {
  name: String!
  startTime: Float!
  endTime: Float
  description: String
  frequency: Frequency!
  scale: Scale!
  sphereHash: String!
  parentHash: String
}