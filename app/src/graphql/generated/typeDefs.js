import {gql} from '@apollo/client';
export const typeDefs = gql`schema{query:Query mutation:Mutation}type AgentProfile{agentPubKey:String!profile:Profile!}type CreateResponsePayload{actionHash:String!entryHash:String!}scalar DateTime enum Frequency{Day Month Quarter Week}type Mutation{createOrbit(orbit:OrbitCreateParams):CreateResponsePayload!createProfile(profile:UserProfileCreateUpdateParams):AgentProfile!createSphere(sphere:SphereCreateParams):CreateResponsePayload!deleteOrbit(orbitHash:ID!):ID!deleteSphere(sphereHash:ID!):ID!updateOrbit(orbit:OrbitUpdateParams):CreateResponsePayload!updateProfile(profile:UserProfileCreateUpdateParams):AgentProfile!updateSphere(sphere:SphereUpdateParams):CreateResponsePayload!}interface Node{eH:String!id:ID!}type Orbit implements Node{eH:String!frequency:Frequency!id:ID!metadata:OrbitMetaData name:String!parentHash:String scale:Scale!sphereHash:String!}type OrbitConnection{edges:[OrbitEdge!]!pageInfo:PageInfo!}input OrbitCreateParams{description:String endTime:Float frequency:Frequency!name:String!parentHash:String scale:Scale!sphereHash:String!startTime:Float!}type OrbitEdge{cursor:String!node:Orbit!}input OrbitHierarchyQueryParams{levelQuery:QueryParamsLevel orbitEntryHashB64:String}type OrbitMetaData{description:String timeframe:TimeFrame!}input OrbitUpdateParams{description:String endTime:Float frequency:Frequency!id:ID!name:String!parentHash:String scale:Scale!sphereHash:String!startTime:Float!}type PageInfo{endCursor:String!hasNextPage:Boolean!hasPreviousPage:Boolean!startCursor:String!}type Profile{fields:ProfileFields nickname:String!}type ProfileFields{avatar:String isPublic:String location:String}type Query{getOrbitHierarchy(params:OrbitHierarchyQueryParams!):String!getLowestSphereHierarchyLevel(sphereEntryHashB64:String!):Int!me:AgentProfile!orbit(id:ID!):Orbit!orbits(sphereEntryHashB64:String):OrbitConnection!sphere(id:ID!):Sphere!spheres:SphereConnection!}input QueryParamsLevel{orbitLevel:Float!sphereHashB64:String}enum Scale{Astro Atom Sub}type Sphere implements Node{eH:String!id:ID!metadata:SphereMetaData name:String!}type SphereConnection{edges:[SphereEdge!]!pageInfo:PageInfo!}input SphereCreateParams{description:String hashtag:String image:String name:String!}type SphereEdge{cursor:String!node:Sphere!}type SphereMetaData{description:String!hashtag:String image:String}input SphereUpdateParams{description:String hashtag:String id:ID!image:String name:String!}type TimeFrame{endTime:Float startTime:Float!}input UserProfileCreateUpdateParams{avatar:String isPublic:String location:String nickname:String!}`;